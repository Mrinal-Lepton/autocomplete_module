import './index.css';import React, { useState, useEffect, useRef, useCallback } from 'react'; function Companyname(props) {const [clickedOutside, setClickedOutside] = useState(false);const [search, setSearch] = useState('');const [label, setLabel] = useState('name');const [cursor, setCursor] = useState(-1);const [test, setTest] = useState("");const [showAutoComplete, setShowAutoComplete] = useState(false);const [width,setWidth]=useState(null);const testRef = useRef();const inactiveTestRef = useRef();const clickRef = useRef();const inputTag = useRef();useEffect(()=>{const styles = getComputedStyle(inputTag.current);let totalsize=Number(styles.width.slice(0,-2))+Number(styles.paddingRight.slice(0,-2))+Number(styles.paddingLeft.slice(0,-2));getWidth(totalsize.toString() + "px");},[]);const getWidth=(width)=>{setWidth(width);};useEffect(() => {setLabel(props.label || 'Company name');}, props.label);useEffect(() => {if (testRef.current) {testRef.current.scrollIntoViewIfNeeded();}}, [cursor]);const handleKeyDown = (e) => {if (e.keyCode === 13) {setTest(search[cursor].company_name);props.parentCallback(search[cursor].company_name);setShowAutoComplete(false);}if (e.keyCode === 9) {setTest(search[cursor].company_name);props.parentCallback(search[cursor].company_name);setShowAutoComplete(false);}if (e.keyCode === 27) {setShowAutoComplete(false);}if (e.keyCode === 38 && cursor > 0) { setCursor(cursor - 1, () => {});if (e.keyCode === 13) {}}else if (e.keyCode === 40 && cursor < search.length - 1) { setCursor(cursor + 1);}};const handleClickOutside = e => {if (!clickRef.current.contains(e.target)) {setClickedOutside(true);}};const handleClickInside = () => setClickedOutside(false); useEffect(() => {document.addEventListener("mousedown", handleClickOutside);return () => document.removeEventListener("mousedown", handleClickOutside);});const handleChangeInSearch = (event) => {setCursor(-1);const { value } = event.target;setTest(value);if (value.length >= 3) {fetch(`https://api.leptonsoftware.com:9962/lepton/companyname?name=${value}`).then(res => res.json()).then(json => { if (event.target.value == json.data.input) { console.log(json); setSearch(json.data.name) } })}else {setShowAutoComplete(false);}};return (<div ref={clickRef} onClick={handleClickInside}><div style={{ position: 'relative' }}><label className='lable-txt'>{label}</label><br></br><input ref={inputTag} onKeyDown={(e) => handleKeyDown(e)} className={props.class ? props.class : "inputAutocomplete"} id="nameid" label="Name" variant="outlined" type='text' name='search' style={{width:'352px',backgroundColor:'#f7f8f9'}} placeholder={props.placeholder ? props.placeholder : ""} value={test} onChange={(e) => { setShowAutoComplete(true); setTest(e.target.value); handleChangeInSearch(e) }} />{((search?.length > 0) && (showAutoComplete) &&(!clickedOutside)) ?<div  style={{width:width}} className={'autocomplete'} >{search?.map((el, i) =><div key={i}><div key={i} className={'autocompletename'}> <div ref={cursor == i ? testRef : inactiveTestRef} className={cursor === i ? 'activeItem' : "inactive"} onClick={(e) => { props.parentCallback(el.company_name); setTest(el.company_name); setShowAutoComplete(false); }}>{el.company_name}</div></div></div>)}</div>: " "}</div></div>);} function Addressinput(props) {const activeRef = useRef();const testRef = useRef();const clickRef = useRef();const focusRef = useRef();const inputTag = useRef();const inactiveTestRef = useRef();const [value, setValue] = useState("");const [showHideList, setShowHideList] = useState(true);const [address, setAddress] = useState("");const [a, setA] = useState("");const [newAddresses, setNewAddresses] = useState();const [cursor, setCursor] = useState(-1);const [clickedOutside, setClickedOutside] = useState(false);const [width,setWidth]=useState(null);const [placePredictions,setPlacePredictions]=useState([]);const getPlacePredictions=(data)=>{fetch(`https://api.leptonsoftware.com:9962/lepton/getplacepredication?input=${data.input}`).then(res => res.json()).then(json =>{setPlacePredictions(json.data)}) } ;useEffect(() => {if (newAddresses != null) {console.log("viiii", newAddresses); props.parentCallback(newAddresses);}}, [newAddresses]);useEffect(()=>{const styles = getComputedStyle(focusRef.current);let totalsize=Number(styles.width.slice(0,-2))+Number(styles.paddingRight.slice(0,-2))+Number(styles.paddingLeft.slice(0,-2));getWidth(totalsize.toString() + "px");},[]);const getWidth=(width)=>{setWidth(width);};useEffect(() => {if (props.searchval != '') {setValue(props.searchval);getPlacePredictions({input:props.searchval});setShowHideList(true);setA(props.searchval);focusRef.current.focus();}}, [props.searchval]);useEffect(() => {setAddress(props.label || 'Company address');}, props.label); useEffect(() => {if (testRef.current) {testRef.current.scrollIntoViewIfNeeded();}}, [cursor]); const handleClickOutside = e => {if (!clickRef.current.contains(e.target)) {setClickedOutside(true);}};const handleClickInside = (e) =>{if(!clickRef.current.contains(e.target)){setClickedOutside(true);}}; const handleKeyDown = (e) => {if (e.keyCode === 13) { setValue(placePredictions[cursor].description);getplace(placePredictions[cursor].place_id, props.apikey);setShowHideList(false);}if (e.keyCode === 9) {setShowHideList(false);}if (e.keyCode === 27) {setShowHideList(false);}if (e.keyCode === 38 && cursor > 0) {if (e.keyCode === 13) {}setCursor(cursor - 1, () => { });} else if (e.keyCode === 40 && cursor < placePredictions.length - 1) {setCursor(cursor + 1);}};const addresscom = (place) =>{const address = place.address_components;const formattedAddress = place.formatted_address;const pincode = address.find((ele) => ele.types.includes("postal_code"));const locality = address.find((ele) => ele.types.includes("locality"));let city = address.find((ele) => ele.types.includes("administrative_area_level_2"));const state = address.find((ele) => ele.types.includes("administrative_area_level_1")); const country = address.find((ele) => ele.types.includes("country"));city = locality?locality:city;let line1 ='';let line2 ='';let line3='';const fullAddress = formattedAddress.split(',');fullAddress.pop();fullAddress.pop();fullAddress.pop();for(let i=0;i<fullAddress.length;i++){if(line1.length+fullAddress[i].length < props.limit){if(line1==='') line1 = `${fullAddress[i]}`;else line1 = `${line1},${fullAddress[i]}`;} else if(line2.length+fullAddress[i].length< props.limit){if(line2==='') line2 = `${fullAddress[i]}`;else line2 = `${line2},${fullAddress[i]}`;}else{if(line3==='') line3 = `${fullAddress[i]}`;else line3 = `${line3},${fullAddress[i]}`;}}let addressParts = {};addressParts.line_one = line1;addressParts.line_two = line2;addressParts.line_three = line3;addressParts.city = city?city.long_name:'';addressParts.state = state?state.long_name:'';addressParts.pincode = pincode?pincode.long_name:'';addressParts.country = country?country.long_name:'';return addressParts; }; const getplace = (place, apikey) => {fetch(`https://api.leptonsoftware.com:9962/lepton/getplace?placeid=${place}`).then(res => res.json()).then(json => {  setNewAddresses({ adressParts: addresscom(json.data), googleResponse: json.data }) })};return (<div ref={clickRef} onClick={handleClickInside} ><label className='lable-txt' >{address}</label><br></br><input ref={focusRef} id='address' style={{width:'352px', backgroundColor:'#f7f8f9'}} className={props.class ? props.class : "inputAutocomplete"}  value={value} placeholder={props.placeholder ? props.placeholder : ""} onKeyDown={(e) => handleKeyDown(e)} onChange={(evt) => { getPlacePredictions({ input: evt.target.value }); setValue(evt.target.value); setShowHideList(true); setCursor(-1);}}/><div style={{width:width}}   >{(showHideList & !clickedOutside) ? (<div className="wrapper-outer" ><ul className="wrapper-ul"> {placePredictions.length>0&&placePredictions.map((item, i) => (<div key={i} className={cursor === i ? 'activeItem' : "inactive"} ref={cursor == i ? testRef : inactiveTestRef} > <li key={i} className="li-inner" onClick={(e) => { setValue(item.description);getplace(item.place_id,props.apikey); setShowHideList(false) }}>{item.description}</li></div>))}</ul></div>) : null}</div></div>);};export  { Addressinput,Companyname }
